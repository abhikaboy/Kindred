name: Build and Push Docker Image

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Set repository name
              id: repo-name
              run: |
                  REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
                  REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
                  echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV
                  echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

            - name: Create .env file
              run: |
                  cat << EOF > backend/.env
                  # App Configuration
                  APP_PORT=8080

                  # MongoDB Atlas Configuration
                  ATLAS_USER=${{ secrets.ATLAS_USER }}
                  ATLAS_PASS=${{ secrets.ATLAS_PASS }}
                  ATLAS_CLUSTER=${{ secrets.ATLAS_CLUSTER }}
                  ATLAS_ENVIRONMENT=${{ secrets.ATLAS_ENVIRONMENT }}

                  # Digital Ocean Spaces Configuration
                  SPACES_BUCKET_NAME=${{ secrets.SPACES_BUCKET_NAME }}
                  SPACES_REGION=${{ secrets.SPACES_REGION }}
                  SPACES_ACCESS_KEY_ID=${{ secrets.SPACES_ACCESS_KEY_ID }}
                  SPACES_SECRET_ACCESS_KEY=${{ secrets.SPACES_SECRET_ACCESS_KEY }}

                  # Auth Configuration
                  AUTH_SECRET=${{ secrets.AUTH_SECRET }}
                  EOF

            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=semver,pattern={{version}}
                      type=sha,format=short
                      type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: ./backend
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
            - name: Deploy to Digital Ocean
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.DO_HOST }}
                  username: ${{ secrets.DO_USERNAME }}
                  key: ${{ secrets.DO_SSH_KEY }}
                  script: |
                      # Login to GitHub Container Registry
                      echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

                      # Pull the latest image (using lowercase repository name)
                      docker pull ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}:latest

                      # Stop and remove the existing container (if it exists)
                      docker stop kindred-backend || true
                      docker rm kindred-backend || true

                      # Run the new container with port 8081
                      docker run -d --name kindred-backend --restart unless-stopped -p 8080:8080 ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}:latest

                      # Clean up unused images
                      docker image prune -f
