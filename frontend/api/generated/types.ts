/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all activities
         * @description Retrieve all activity records
         */
        get: operations["get-activities"];
        put?: never;
        /**
         * Create a new activity
         * @description Create a new activity record
         */
        post: operations["create-activity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/activity/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get activity by ID
         * @description Retrieve a specific activity by its ID
         */
        get: operations["get-activity"];
        put?: never;
        post?: never;
        /**
         * Delete activity
         * @description Delete an activity record
         */
        delete: operations["delete-activity"];
        options?: never;
        head?: never;
        /**
         * Update activity
         * @description Update an activity record
         */
        patch: operations["update-activity"];
        trace?: never;
    };
    "/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticate user with email and password
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/login/apple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login with Apple
         * @description Authenticate user with Apple ID
         */
        post: operations["login-apple"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User logout
         * @description Logout user and invalidate tokens
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User registration
         * @description Register a new user account
         */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/register/apple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register with Apple
         * @description Register a new user with Apple ID
         */
        post: operations["register-apple"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all blueprints
         * @description Retrieve all blueprints
         */
        get: operations["get-blueprints"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprints/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get blueprint by ID
         * @description Retrieve a specific blueprint by its ID
         */
        get: operations["get-blueprint"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all categories
         * @description Retrieve all categories
         */
        get: operations["get-categories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get category by ID
         * @description Retrieve a specific category by its ID
         */
        get: operations["get-category"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Returns the health status of the API
         */
        get: operations["get-health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all profiles
         * @description Retrieve all user profiles
         */
        get: operations["get-profiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/profiles/email/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get profile by email
         * @description Retrieve a user profile by email address
         */
        get: operations["get-profile-by-email"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/profiles/phone/{phone}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get profile by phone
         * @description Retrieve a user profile by phone number
         */
        get: operations["get-profile-by-phone"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/profiles/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search profiles
         * @description Search for user profiles by query string
         */
        get: operations["search-profiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/profiles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get profile by ID
         * @description Retrieve a specific user profile by its ID
         */
        get: operations["get-profile"];
        put?: never;
        post?: never;
        /**
         * Delete profile
         * @description Delete a user profile
         */
        delete: operations["delete-profile"];
        options?: never;
        head?: never;
        /**
         * Update profile
         * @description Update a user profile
         */
        patch: operations["update-profile"];
        trace?: never;
    };
    "/v1/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all tasks
         * @description Retrieve all task records
         */
        get: operations["get-tasks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tasks/active/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get active tasks
         * @description Retrieve all active tasks for a user
         */
        get: operations["get-active-tasks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get task by ID
         * @description Retrieve a specific task by its ID
         */
        get: operations["get-task"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test authentication
         * @description Test endpoint for authenticated users
         */
        get: operations["auth-test"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test authentication
         * @description Test endpoint for authenticated users
         */
        get: operations["auth-test-slash"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/blueprints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new blueprint
         * @description Create a new blueprint for the authenticated user
         */
        post: operations["create-blueprint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/blueprints/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete blueprint
         * @description Delete a blueprint for the authenticated user
         */
        delete: operations["delete-blueprint"];
        options?: never;
        head?: never;
        /**
         * Update blueprint
         * @description Update a blueprint for the authenticated user
         */
        patch: operations["update-blueprint"];
        trace?: never;
    };
    "/v1/user/blueprints/{id}/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Subscribe to blueprint
         * @description Subscribe to a blueprint
         */
        patch: operations["subscribe-to-blueprint"];
        trace?: never;
    };
    "/v1/user/blueprints/{id}/unsubscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Unsubscribe from blueprint
         * @description Unsubscribe from a blueprint
         */
        patch: operations["unsubscribe-from-blueprint"];
        trace?: never;
    };
    "/v1/user/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new category
         * @description Create a new category for the authenticated user
         */
        post: operations["create-category"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/categories/workspace/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete workspace
         * @description Delete a workspace and all its categories
         */
        delete: operations["delete-workspace"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get categories by user ID
         * @description Retrieve all categories for a specific user
         */
        get: operations["get-categories-by-user"];
        put?: never;
        post?: never;
        /**
         * Delete category
         * @description Delete a category for the authenticated user
         */
        delete: operations["delete-category"];
        options?: never;
        head?: never;
        /**
         * Update category
         * @description Update a category for the authenticated user
         */
        patch: operations["update-category"];
        trace?: never;
    };
    "/v1/user/connections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all connections
         * @description Retrieve all connection requests
         */
        get: operations["get-connections"];
        put?: never;
        /**
         * Create a new connection
         * @description Create a new friend connection request
         */
        post: operations["create-connection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/connections/received": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connections by receiver
         * @description Get all connections where the authenticated user is the receiver
         */
        get: operations["get-connections-by-receiver"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/connections/requested/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connections by requester
         * @description Get all connections where the specified user is the requester
         */
        get: operations["get-connections-by-requester"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/connections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connection by ID
         * @description Retrieve a specific connection by its ID
         */
        get: operations["get-connection"];
        put?: never;
        post?: never;
        /**
         * Delete connection
         * @description Delete/deny a connection request
         */
        delete: operations["delete-connection"];
        options?: never;
        head?: never;
        /**
         * Update connection
         * @description Update a connection request
         */
        patch: operations["update-connection"];
        trace?: never;
    };
    "/v1/user/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login with token
         * @description Authenticate user with existing token
         */
        post: operations["login-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all posts
         * @description Retrieve all posts
         */
        get: operations["get-posts"];
        put?: never;
        /**
         * Create a new post
         * @description Create a new post with the provided details
         */
        post: operations["create-post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/posts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get post by ID
         * @description Retrieve a specific post by its ID
         */
        get: operations["get-post"];
        put?: never;
        post?: never;
        /**
         * Delete post
         * @description Delete an existing post
         */
        delete: operations["delete-post"];
        options?: never;
        head?: never;
        /**
         * Update post
         * @description Update an existing post
         */
        patch: operations["update-post"];
        trace?: never;
    };
    "/v1/user/pushtoken": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update push token
         * @description Update user's push notification token
         */
        post: operations["update-push-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tasks by user
         * @description Retrieve tasks for a specific user with optional sorting
         */
        get: operations["get-tasks-by-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/tasks/active/{category}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate/deactivate task
         * @description Change the active status of a task
         */
        post: operations["activate-task"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/tasks/complete/{category}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete task
         * @description Mark a task as completed
         */
        post: operations["complete-task"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/tasks/template/old": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tasks with old start times
         * @description Get all tasks with start times older than one day
         */
        get: operations["get-tasks-with-old-start-times"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/tasks/template/pastDeadline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recurring tasks with past deadlines
         * @description Get all recurring tasks that have past their deadlines
         */
        get: operations["get-recurring-tasks-with-past-deadlines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/tasks/template/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create task from template
         * @description Create a new task based on a template
         */
        post: operations["create-task-from-template"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/tasks/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new task
         * @description Create a new task in a specific category
         */
        post: operations["create-task"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/tasks/{category}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete task
         * @description Delete a task record
         */
        delete: operations["delete-task"];
        options?: never;
        head?: never;
        /**
         * Update task
         * @description Update a task record
         */
        patch: operations["update-task"];
        trace?: never;
    };
    "/v1/user/tasks/{category}/{id}/checklist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update task checklist
         * @description Update the checklist field of a task
         */
        post: operations["update-task-checklist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/tasks/{category}/{id}/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update task notes
         * @description Update the notes field of a task
         */
        post: operations["update-task-notes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/waitlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all waitlist entries
         * @description Retrieve all waitlist entries (admin only)
         */
        get: operations["get-waitlists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/waitlist/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get waitlist entry by ID
         * @description Retrieve a specific waitlist entry by its ID
         */
        get: operations["get-waitlist"];
        put?: never;
        post?: never;
        /**
         * Delete waitlist entry
         * @description Remove a waitlist entry by its ID
         */
        delete: operations["delete-waitlist"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user workspaces
         * @description Retrieve all workspaces for the authenticated user
         */
        get: operations["get-workspaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/waitlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new waitlist entry
         * @description Add a new email to the waitlist
         */
        post: operations["create-waitlist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/welcome": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Welcome endpoint
         * @description Returns a welcome message
         */
        get: operations["get-welcome"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ActivateTaskOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        ActivityDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            field1: string;
            id: string;
            picture: string | null;
            /** Format: date-time */
            timestamp: string;
        };
        BlueprintDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Banner image URL */
            banner: string;
            /** @description Description of the blueprint */
            description: string;
            /** @description Expected duration */
            duration: string;
            /** @description Unique identifier for the blueprint */
            id: string;
            /** @description Name of the blueprint */
            name: string;
            /** @description Owner information */
            owner: components["schemas"]["UserExtendedReference"];
            /** @description List of subscriber user IDs */
            subscribers: string[] | null;
            /**
             * Format: int64
             * @description Number of subscribers
             */
            subscribersCount: number;
            /** @description Tags associated with the blueprint */
            tags: string[] | null;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            timestamp: string;
        };
        CategoryDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            id: string;
            /** Format: date-time */
            lastEdited: string;
            name: string;
            tasks: components["schemas"]["TaskDocument"][] | null;
            user: string;
            workspaceName: string;
        };
        ChecklistItem: {
            completed: boolean;
            content: string;
            /** Format: int64 */
            order: number;
        };
        CompleteTaskDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            timeCompleted: string;
            timeTaken: string;
        };
        CompleteTaskOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        ConnectionDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Connection ID */
            id: string;
            /** @description Receiver user ID */
            reciever: string;
            /** @description Connection requester information */
            requester: components["schemas"]["ConnectionUser"];
            /**
             * Format: date-time
             * @description Connection timestamp
             */
            timestamp: string;
        };
        ConnectionUser: {
            /** @description User ID */
            _id: string;
            /** @description User handle */
            handle: string;
            /** @description User name */
            name: string;
            /** @description Profile picture URL */
            picture: string | null;
        };
        CreateActivityParams: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            field1: string;
            field2: string;
            picture: string | null;
        };
        CreateBlueprintParams: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Banner image URL for the blueprint */
            banner: string;
            /** @description Description of the blueprint */
            description: string;
            /** @description Expected duration to complete the blueprint */
            duration: string;
            /** @description Name of the blueprint */
            name: string;
            /** @description Tags associated with the blueprint */
            tags: string[] | null;
        };
        CreateCategoryParams: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name?: string;
            workspaceName?: string;
        };
        CreateConnectionParams: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Receiver user ID */
            reciever: string;
            /** @description Connection requester information */
            requester: components["schemas"]["ConnectionUser"];
        };
        CreatePostParams: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            field1: string;
            field2: string;
            picture: string | null;
        };
        CreateTaskParams: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            active: boolean;
            checklist?: components["schemas"]["ChecklistItem"][] | null;
            content: string;
            /** Format: date-time */
            deadline?: string;
            notes?: string;
            /** Format: int64 */
            priority: number;
            public: boolean;
            recurDetails?: components["schemas"]["RecurDetails"];
            recurFrequency?: string;
            recurring: boolean;
            reminders?: components["schemas"]["Reminder"][] | null;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            startTime?: string;
            /** Format: double */
            value: number;
        };
        CreateWaitlistParams: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description User email address */
            email: string;
            /** @description User full name */
            name: string;
        };
        DeleteActivityOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        DeleteBlueprintOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        DeleteCategoryOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        DeleteConnectionOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        DeletePostOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        DeleteProfileOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        DeleteTaskOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        DeleteWaitlistOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
            status: string;
        };
        DeleteWorkspaceOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][] | null;
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             */
            status?: number;
            /** @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             */
            type: string;
        };
        HealthOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            status: string;
        };
        LoginRequest: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            email: string;
            password: string;
        };
        LoginRequestApple: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            apple_id: string;
        };
        LogoutOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        PostDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            field1: string;
            field2: string;
            id: string;
            picture: string | null;
            /** Format: date-time */
            timestamp: string;
        };
        ProfileDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            display_name: string;
            friends: string[] | null;
            handle: string;
            id: string;
            profile_picture: string | null;
            /** Format: int64 */
            tasks_complete: number;
        };
        RecurDetails: {
            behavior?: string;
            daysOfMonth?: number[] | null;
            daysOfWeek?: number[] | null;
            /** Format: int64 */
            every?: number;
            months?: number[] | null;
            reminders?: (string | null)[] | null;
        };
        RegisterOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        RegisterRequest: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            email: string;
            password: string;
        };
        RegisterRequestApple: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            apple_id: string;
            email: string;
        };
        Reminder: {
            afterStart: boolean;
            beforeDeadline: boolean;
            beforeStart: boolean;
            sent: boolean;
            /** Format: date-time */
            triggerTime: string;
            type: string;
        };
        SafeUser: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            _id: string;
            categories: components["schemas"]["CategoryDocument"][] | null;
            display_name: string;
            friends: string[] | null;
            handle: string;
            profile_picture: string;
            recent_activity: components["schemas"]["ActivityDocument"][] | null;
            /** Format: double */
            tasks_complete: number;
        };
        SubscribeToBlueprintOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        TaskDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            active: boolean;
            categoryID?: string;
            checklist?: components["schemas"]["ChecklistItem"][] | null;
            content: string;
            /** Format: date-time */
            deadline?: string;
            id: string;
            /** Format: date-time */
            lastEdited: string;
            notes?: string;
            /** Format: int64 */
            priority: number;
            public: boolean;
            recurDetails?: components["schemas"]["RecurDetails"];
            recurFrequency?: string;
            recurType?: string;
            recurring: boolean;
            reminders?: components["schemas"]["Reminder"][] | null;
            /** Format: date-time */
            startDate: string | null;
            /** Format: date-time */
            startTime?: string;
            templateID?: string;
            /** Format: date-time */
            timestamp: string;
            userID?: string;
            /** Format: double */
            value: number;
        };
        TemplateTaskDocument: {
            categoryID: string;
            checklist?: components["schemas"]["ChecklistItem"][] | null;
            content: string;
            /** Format: date-time */
            deadline?: string;
            id: string;
            /** Format: date-time */
            lastEdited: string;
            /** Format: date-time */
            lastGenerated: string | null;
            /** Format: date-time */
            nextGenerated: string | null;
            notes?: string;
            /** Format: int64 */
            priority: number;
            public: boolean;
            recurDetails: components["schemas"]["RecurDetails"];
            recurFrequency?: string;
            recurType: string;
            reminders?: components["schemas"]["Reminder"][] | null;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            startTime?: string;
            /** Format: double */
            value: number;
        };
        TestOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UnsubscribeFromBlueprintOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UpdateActivityDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            field1?: string;
            field2?: string;
            picture?: string;
        };
        UpdateActivityOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UpdateBlueprintDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description New banner image URL */
            banner?: string;
            /** @description New description */
            description?: string;
            /** @description Updated expected duration */
            duration?: string;
            /** @description New name for the blueprint */
            name?: string;
            /** @description Updated subscriber list */
            subscribers?: string[];
            /** @description Updated tags */
            tags?: string[];
            /**
             * Format: date-time
             * @description Update timestamp
             */
            timestamp?: string;
        };
        UpdateBlueprintOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UpdateCategoryDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            name?: string;
        };
        UpdateConnectionDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
        };
        UpdateConnectionOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UpdatePostDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            field1?: string;
            field2?: string;
            picture?: string;
        };
        UpdatePostOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UpdateProfileDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            display_name?: string;
            handle?: string;
            profile_picture?: string;
        };
        UpdateProfileOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UpdatePushTokenOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UpdatePushTokenRequest: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            push_token: string;
        };
        UpdateTaskChecklistDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            checklist: components["schemas"]["ChecklistItem"][] | null;
        };
        UpdateTaskChecklistOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UpdateTaskDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            active: boolean;
            checklist?: components["schemas"]["ChecklistItem"][] | null;
            content: string;
            notes?: string;
            /** Format: int64 */
            priority: number;
            public: boolean;
            recurDetails: components["schemas"]["RecurDetails"];
            recurring: boolean;
            /** Format: double */
            value: number;
        };
        UpdateTaskNotesDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            notes: string;
        };
        UpdateTaskNotesOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UpdateTaskOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UserExtendedReference: {
            /** @description User ID */
            _id: string;
            /** @description User display name */
            display_name: string;
            /** @description User handle */
            handle: string;
            /** @description Profile picture URL */
            profile_picture: string;
        };
        WaitlistDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description User email address */
            email: string;
            /** @description Unique waitlist entry identifier */
            id: string;
            /** @description User full name */
            name: string;
            /**
             * Format: date-time
             * @description Entry creation timestamp
             */
            timestamp: string;
        };
        WelcomeOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        WorkspaceResult: {
            categories: components["schemas"]["CategoryDocument"][] | null;
            name: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivityDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateActivityParams"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivityDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-activity": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivityDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-activity": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteActivityOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-activity": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateActivityDocument"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateActivityOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    access_token?: string;
                    refresh_token?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SafeUser"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "login-apple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestApple"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    access_token?: string;
                    refresh_token?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SafeUser"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    access_token?: string;
                    refresh_token?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "register-apple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequestApple"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    access_token?: string;
                    refresh_token?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-blueprints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-blueprint": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-category": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-profile-by-email": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example user@example.com */
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-profile-by-phone": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example +1234567890 */
                phone: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "search-profiles": {
        parameters: {
            query?: {
                /** @example john */
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-profile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-profile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteProfileOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-profile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileDocument"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateProfileOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-active-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-task": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "auth-test": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "auth-test-slash": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-blueprint": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBlueprintParams"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-blueprint": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteBlueprintOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-blueprint": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBlueprintDocument"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateBlueprintOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "subscribe-to-blueprint": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscribeToBlueprintOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "unsubscribe-from-blueprint": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnsubscribeFromBlueprintOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-category": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryParams"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-workspace": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example workspace1 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteWorkspaceOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-categories-by-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResult"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-category": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteCategoryOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-category": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCategoryDocument"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-connections": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-connection": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateConnectionParams"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-connections-by-receiver": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-connections-by-requester": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-connection": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-connection": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteConnectionOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-connection": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateConnectionDocument"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateConnectionOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "login-token": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    access_token?: string;
                    refresh_token?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SafeUser"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-posts": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-post": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePostParams"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-post": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-post": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeletePostOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-post": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePostDocument"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdatePostOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-push-token": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePushTokenRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdatePushTokenOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-tasks-by-user": {
        parameters: {
            query?: {
                id?: string;
                /** @example timestamp */
                sortBy?: string;
                /** @example -1 */
                sortDir?: string;
            };
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "activate-task": {
        parameters: {
            query?: {
                /** @example true */
                active?: string;
            };
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
                /** @example 507f1f77bcf86cd799439011 */
                category: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivateTaskOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "complete-task": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
                /** @example 507f1f77bcf86cd799439011 */
                category: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompleteTaskDocument"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteTaskOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-tasks-with-old-start-times": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateTaskDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-recurring-tasks-with-past-deadlines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateTaskDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-task-from-template": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-task": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                category: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTaskParams"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-task": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
                /** @example 507f1f77bcf86cd799439011 */
                category: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteTaskOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-task": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
                /** @example 507f1f77bcf86cd799439011 */
                category: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTaskDocument"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateTaskOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-task-checklist": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
                /** @example 507f1f77bcf86cd799439011 */
                category: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTaskChecklistDocument"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateTaskChecklistOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-task-notes": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
                /** @example 507f1f77bcf86cd799439011 */
                category: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTaskNotesDocument"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateTaskNotesOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-waitlists": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitlistDocument"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-waitlist": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitlistDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-waitlist": {
        parameters: {
            query?: never;
            header: {
                /** @description Bearer token for authentication */
                Authorization: string;
                /** @description Refresh token for authentication */
                refresh_token: string;
            };
            path: {
                /** @example 507f1f77bcf86cd799439011 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteWaitlistOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-workspaces": {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResult"][] | null;
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-waitlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWaitlistParams"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitlistDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-welcome": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WelcomeOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
