import React from 'react';
import { Image, ImageProps, ImageSource } from 'expo-image';
import { View, StyleSheet } from 'react-native';
import { useThemeColor } from '@/hooks/useThemeColor';

interface CachedImageProps extends Omit<ImageProps, 'source'> {
  source: ImageSource;
  fallbackSource?: ImageSource;
  cachePolicy?: 'memory' | 'disk' | 'memory-disk';
  variant?: 'thumbnail' | 'medium' | 'large' | 'original';
  useLocalPlaceholder?: boolean; // New prop to enable local placeholders
}

const CachedImage: React.FC<CachedImageProps> = ({
  source,
  fallbackSource,
  placeholder,
  cachePolicy = 'memory-disk',
  variant = 'medium',
  useLocalPlaceholder = true,
  style,
  ...props
}) => {
  const themeColors = useThemeColor();
  // Optimize URL for CDN and add query parameters for future image processing
  const getOptimizedURL = (url: string) => {
    if (!url || typeof url !== 'string') {
      return url;
    }

    // Skip optimization for external URLs (non-Spaces URLs)
    if (!url.includes('digitaloceanspaces.com') && !url.includes('kindredtodo.com')) {
      return url;
    }

    let optimizedURL = url;

    // Note: CDN URLs are now automatically generated by the backend
    // No need to manually convert URLs here anymore

    // Add variant-specific query parameters for future image processing
    const variants = {
      thumbnail: '?w=300&h=300&q=80&f=webp',
      medium: '?w=800&h=800&q=85&f=webp',
      large: '?w=1200&h=1200&q=90&f=webp',
      original: '' // No processing for original
    };

    // Note: These query parameters are prepared for future image processing service
    // Currently they will be ignored, but the CDN optimization will still work
    const queryParams = variants[variant] || variants.medium;
    
    // Only add query params if URL doesn't already have them
    if (queryParams && !optimizedURL.includes('?')) {
      optimizedURL += queryParams;
    }

    return optimizedURL;
  };

  const optimizedSource = {
    ...source,
    uri: getOptimizedURL((source as any)?.uri || '')
  };

  // Get the appropriate placeholder based on theme
  const getLocalPlaceholder = () => {
    if (!useLocalPlaceholder) return placeholder;
    
    // Use theme-appropriate placeholder
    const isDark = themeColors.background === '#000000' || themeColors.background === '#1a1a1a';
    return isDark 
      ? require('@/assets/images/placeholder dark.jpg')
      : require('@/assets/images/placeholder light.jpg');
  };

  const finalPlaceholder = placeholder || getLocalPlaceholder();

  return (
    <Image
      source={optimizedSource}
      placeholder={finalPlaceholder}
      contentFit="cover"
      transition={200}
      cachePolicy={cachePolicy}
      allowDownscaling={true}
      decodeFormat="rgb"
      style={[styles.image, style]}
      {...props}
    />
  );
};

const styles = StyleSheet.create({
  image: {
    width: '100%',
    height: '100%',
  },
});

export default CachedImage;
